* Konzept
- indoor landmark navigation
- TU Gebäude als Test Umgebung
- erweiterbares Framework
  - Ortbestimmung durch WIFI Triangulation
  - Hinzugefügte Landmark Bilder mittels Compass ausrichten
- Android App
- LMs durch user input
- Navigation anhand von LMs
- Kartographie über OSM

Funktionen:
- Routenplanung im Gebäude.
  - Startpunkt, Endpunkt (Geoposition oder Raum)
  - Route
- Indoor Visualisierung der Route
- Map View. Digitaler Grundriss der TU (Hauptgebäude).
  - LMs im Map View anzeigen (Thumbnails).
- LM View. Route durch Serie von Bildern und Instruktionen anzeigen.
- Hinzufügen von LMs mittels Smartphone Kamera und Platzierung auf der
  Karte.

Vorgehensweise
1) Rerche
2) Routenplanung
3) Visualisierung Indoor
4) LM Datenbank Design
5) LMs von Route berechnen (Bilder + Text)

TODOs:
- Datenbankdesign
  - Grundrisspläne -> OSM
  - LM Bilder (Position, Ausrichtung, Inhalt)
- Businesslogik
  - Routenplanung
  - LMs speichern/ändern
- GUI
  - Map View
  - LM View
  - LM hinzufügen Maske

[[file:img/overview.png]]

* Open Street Maps

[[file:img/OSM_Components.png]]

* Indoor Tagging
** Tags in use
 - level=n - indicates floor level; interpretation of the values
   varies (see key page) 

   <n> is usually an integer number, sometimes also one or two
   characters, sometimes combined (e.g. A,B,C,1,2,3).  in any case,
   <n> should be ascending (towards the sky).  in some cultures base
   level is indicated by level 0, in other cultures ground floor is
   level 1 (or A).  there are also usages reported where fraction
   numbers are used (e.g. level=2.5) indicating a "mezzanine" or
   "intermediate level" (e.g. intermediate stairway platforms).  Room
   number and name is entered in the ref=* and name=* tag.
 - room=yes - see key wiki page for additional values to describe the
   type more detailed
 - entrance=yes - room or building entrance
 - capacity=* - number of seats in a room
 - highway=elevator - elevators
 - highway=steps - stairways
 - conveying=yes/forward/backward/reversible

** proposed Tags
highway=corridor - indoor ways
indoor=yes - indicates any osm object being inside a room, a building
(or both) or a shelter.

* Indoor Routing
** Anyplace
   failed -> Google Maps, not OSM

** Graphhopper
*** default OSM
    [[file:img/graphhopper-default-osm.png]]

*** edit: add tag foot=yes
    [[file:img/graphhopper-edited-osm-foot-yes.png]]

*** with activated corridor tag (Demo: Level Problem)
[[file:img/gh-lvl0-route.png]]
[[file:img/gh-lvl1-route.png]]
*** select room as source/destination
    Rooms can be selected by either a dropdown list or through a
    search bar. (dropdown will be just for reference, the TU main
    building has more than 800 rooms, scrolling through them won't be
    much of a breeze.)
    This type of start/destination selection is necessary, clicking on
    the map is a nice feature on first encounter, but one would need
    to know where the room is in advance. this makes the navigation
    process a little obsolete.
    Most of the rooms are mapped without a name atm (and a lot don't
    have a real name, so thats ok). But lecture rooms and some special
    places, like the Studien und Pruefunsabteilung, should be named,
    so that the user can easily find them.
*** supported tags. foot=yes necessary?
    - foot=yes bezieht sich auf eine access restriction und sollte
      daher nicht attribut fuer 'routebar' verwendet werden. besser
      wäre es das attribut highway=corridor in graphhopper aufzunehmen
      und fuer fussgaengerwege zu verwenden. <2016-02-13 Sat 23:20>
*** FlagEncoder
    GH verwendet FlagEncoder (zB Foot, Car, Bike) um die OSM Tags
    entsprechend zu interpretieren. 
    Da für indoor Routen der Tag highway=corridor verwendet wird, habe
    ich den FootFlagEncoder entsprechend erweitert. Damit wird indoor
    routing grundsätzlich ausgeführt. 
    Es gilt nun eine geeignete Input Möglichkeit für Start und Ziel zu
    schaffen, da sich mit Klicken auf die Map kein Stockwerk bestimmen
    lässt und somit nicht klar ist wohin man eigentlich geroutet wird.
    <2016-02-19 Fri 21:42>
    

*** Route

#+BEGIN_SRC javascript
{
"hints":{"visited_nodes.average":"386.0","visited_nodes.sum":"386"},
"paths":[
  {"instructions":[
    {"distance":43.581,
     "sign":0,
     "interval":[0,2],
     "text":"Continue onto Resselgasse",
     "time":31378},
    {"distance":175.72,
     "sign":0,
     "interval":[2,7],
     "text":"Continue",
     "time":126502},
    {"distance":0,
     "sign":4,
     "interval":[7,7],
     "text":"Finish!",
     "time":0}],
    "descend":0,
    "ascend":0,
    "distance":219.301,
    "bbox":[16.368347,48.198502,16.371026,48.19908],
    "weight":130.032719,
    "time":157880,
    "points_encoded":false,
    "points":
    {"coordinates":[
      [16.368347,48.19908],
      [16.368816,48.198937],
      [16.368881,48.198916],
      [16.370322,48.198502],
      [16.370504,48.198568],
      [16.370855,48.198634],
      [16.370955,48.198555],
      [16.371026,48.198549]],
     "type":"LineString"}}],
    "info":
    {"took":20,
     "copyrights":["GraphHopper","OpenStreetMap contributors"]}}
#+END_SRC

[[file:img/gh-example-route.png]]
[[file:img/gh-example-route-points.png]]

Knoten können durch ihre exakten Koordinaten ausgewählt werden, da
Knoten auch über mehrere Stockwerke hinweg nicht genau die gleichen
Koordinaten haben können ist das Stockwerkselektionsproblem gelöst.

** osm proposal [CANCELED, not necessary]

   Combine rooms and entries to relations (in the future possibly also
   windows). They form a unity and should me marked for that. 

   For indoor routing: Then a room relation can be selected as
   destination point and the nearest entry can be chosen by the
   routing engine.

** Eingang zum Raum finden
   Um zu einem Raum routen zu können, muss der (ein) Eingang
   ausgewählt werden. Räume sind als Ways gemodelt, Eingänge als
   Knotenpunkt auf diesem Way. Mittels Overpass lässt sich ein Way per
   Referenz finden, in Knotenpunkte auflösen, welche danach wiederum
   gefiltert werden können.

   Beispiel, Eingangsknoten des Raums "AA EG 66":
   way [ref="AA EG 66"]; node(w) [entrance=yes]; out;
   
*** get_room_list.sh
    Da Skript queried osm mittels overpass api und erstellt ein db
    file (plain text), mit allen Räumen und deren Eingängen.
    
    Beispiel Output:
    [[file:img/room-list.png]]

    Interessant: AA EG 03 hat beispielsweise keine Eingänge.
    Das liegt daran, dass sie nicht gemapt wurden.

    [[file:img/josm-no-entry.png]]

** bbox
   Square around TU main building

   low lat: 48.1977628
   low lon: 16.3676514
   up lat:  48.1992829
   up lon:  16.3710070
   
   (48.1977628,16.3676514,48.1992829,16.3710070)

** overpass API
*** Web Service
     http://overpass-api.de
     
     Example Query:
     
     All entrances on ground floor of TU main building
     
     #+BEGIN_SRC http   
     http://overpass-api.de/api/interpreter?node[level=0][entrance](48.1977628,16.3676514,48.1992829,16.3710070);out;
     #+END_SRC
     
     
*** Local Service
   All room relations

** Web App
   <2016-03-03 Thu 17:17>
   Akutell kann mittels der Web App eine Indoor Route im Erdgeschoss
   berechnet und dargestellt werden. Dazu gibt es zwei Dropdown Boxen
   um Start und Zielraum auszuwählen. Die Route wird mittels
   Graphhopper berechnet, zur graphischen Darstellung werden sie an
   mapweaver weitergeleitet, welcher das Bild berechnet.

   Hier zwei Beispiele:
   [[file:img/lmnav-demo1.png]]

   [[file:img/lmnav-demo2.png]]


   <2016-05-05 Thu>
   Neues Beispiel mit Alpha Version des Image Selectors

   [[file:img/demo.png]]


   <2016-05-05 Thu>
   Neues Beispiel mit Routing Instruction Augmentation
   [[file:img/demo_with_arrows.png]]

* Glossar
** Osmosis
   Java CLI application to process osm data.
** API
   RESTfull API, returns XML (.osm)
   base url: http://api.openstreetmap.org/
   dev base url: http://api06.dev.openstreetmap.org/
   
   example call:
   http://api.openstreetmap.org/api/0.6/map?bbox=left,bottom,right,top
   as in:
   http://www.openstreetmap.org/api/0.6/map?bbox=48.20742,16.42073,48.20713,16.42142
   (to get Ernst-Happel Stadion)

** Mapnik
   OS C++ toolkit for rendering maps.

** PostgreSQL
   FOSS ORDBMS (object relational database management system)

** PostGIS
   postgres addon for geographic object support

** osm2pgsql
   cli programm to convert osm files to postGIS enabled postgres
   database

** planet.osm
   weekly dump of osm data into *.osm files

** XAPI
   extended osm API, REST with X-path flavouring

** XPath
   Query language to navigate through the tree of an XML file

** Overpass API
   Extended XAPI API for read only access to OSM.
   Faster then regular API, and supports far more compelx queries.

** overpass turbo
   web frontend for the overpass API for testing
   http://overpass-turbo.eu/

** Leaflet
   OS slippy map javascript library

** OpenLayers
   OS javascript library to display map data in web browsers (same
   purpose as leaflet)
   
** potlatch
   flash web osm editor

** josm
   java desktop osm editor

** Graphhopper
   open source routing library and server

* How Tos
** Change osm map
1) use josm tu change it
2) save into graphhopper/tu.osm
3) make the new map available to overpass
   overpass/repopulate_db.sh
4) remake rooms.list
   lmnav/scripts/get_room_list.sh
5) copy room list to /srv/http/lmnav/rooms.json

** change picture-directions.osm
1) change in josm
2) cp picture-db/picture-directions.osm /srv/http/lmnav/

* TODOs
** Blickachse
[betrifft verbesserung des image selection algorithmus]
wenn ein Foto in Blickrichtung gemacht wurde (zB einen Gang entlang)
kann ein größerer Radius angenommen werden als 5 Meter.
Wie berechnet man, ob ein Punkt auf der Blickachse liegt?

** Niveau Sprünge im OSM berücksichtigen
** Stockwerkinformation berücksichtigen
** Auswahl von Eingängen verfeinern (Bsp: Nelsons, kleiner Teil Prechtlsaal)
** restricted areas
** Stiegen explizit erwähnen

** Bilder auf Knotenpunkten aufnehmen (bsp Weg zum Aufbaulabor)
** Framework zum Ausrichten von Bildern (auf OSM Wege ausgelegt)
* Open Questions and Discussables
- öffentliche Zugänglichkeit
  - ZKK

- Datenschutz
  - Recht Fotos von Innenräumen öffentlich machen

* Stundenliste
  CLOCK: [2016-05-11 Wed 20:49]--[2016-05-11 Wed 23:02] =>  2:13
  - color style for josm picture directions
  - map more pictures
  - new notes
  - adapt overview.dia
  CLOCK: [2016-05-05 Thu 16:12]--[2016-05-05 Thu 19:45] =>  3:33
  - routing instructions
  - route angle calculation
  - arrows
  - route instruction overlay in images
  - mail update
  - update notes
  CLOCK: [2016-05-04 Wed 17:31]--[2016-05-05 Thu 03:33] => 10:02
  - rewrite image selection algorithm
  - fix tu.osm bug where levels overlap (there are probably a lot
    more, but now for testing)
  - the original mapper didn't get the niveau jumps. actually the
    whole map needs to be fixed
  - map more images
  - create script webify_images.sh 
  - create 404 image
  - create script populate_server.sh
  - update notes
  CLOCK: [2016-04-30 Sat 12:15]--[2016-04-30 Sat 14:33] =>  2:18
  - route-gen.py, route-getn-proxy.php, events.js
  - include images
  CLOCK: [2016-04-29 Fri 11:58]--[2016-04-29 Fri 14:24] =>  2:26
  - route-gen.py: find pics in radius of segment (step) start point
  CLOCK: [2016-04-28 Thu 22:46]--[2016-04-28 Thu 23:29] =>  0:43
  - include new calculations into route-gen.py
  CLOCK: [2016-03-29 Tue 22:50]--[2016-03-29 Tue 23:17] =>  0:27
  - rewrite distance and angle script
  CLOCK: [2016-03-29 Tue 13:24]--[2016-03-29 Tue 16:05] =>  2:41
  - recherche sphärischen geometrie
  - scripten: berechnung distance und winkel
  CLOCK: [2016-03-27 Sun 12:43]--[2016-03-27 Sun 16:46] =>  4:03
  - start python script route-gen.py
  - parse josm file to create image db
  - image db: coordinates where it's taken, viewing angle, image name
  CLOCK: [2016-03-26 Sat 15:33]--[2016-03-26 Sat 21:04] =>  5:31
  - Bilder aufnehmen
  - Ueberlegung wie man die Bilder am besten markiert.
  - mark images using josm
  CLOCK: [2016-03-03 Thu 14:05]--[2016-03-03 Thu 17:50] =>  3:45
  - Einbinden mapweaver in webapp
  - automatische route image creation
  - diagramm update
  CLOCK: [2016-03-02 Wed 15:31]--[2016-03-02 Wed 19:12] =>  3:41
  - mapweaver Recherche
  - mapweaver and perl 5.22 anpassen
  - mapweaver style file erstellen
  CLOCK: [2016-02-27 Sat 16:34]--[2016-02-27 Sat 18:37] =>  2:03
  - Recherche mapnik
  - Installation mapnik (+ python bindings)
  - mapweaver
  CLOCK: [2016-02-26 Fri 18:08]--[2016-02-27 Sat 02:47] =>  8:39
  - get_room_list.sh
  - Aufsetzen Apache + PHP
  - Erstellen des ersten Prototypen fuer das Webinterface
  - index.html
  - list_rooms.js
  - events.js
  - proxy.php
  - Digramm erstellt
  CLOCK: [2016-02-25 Thu 20:16]--[2016-02-25 Thu 20:41] =>  0:25
  - Mit Skript zum ektrahiern von Räumen begonnen
  CLOCK: [2016-02-25 Thu 15:12]--[2016-02-25 Thu 19:42] =>  4:30
  - Recherche Programmatisches Filter von Räumen
  - Idee: Relation Raum+Entries
  - Aufsetzen Overpass API Server
  - Einlesen Overpass QL
  - Helper Scripts fuer Query und DB Repopulation schreiben (overpass)
  CLOCK: [2016-02-24 Wed 15:22]--[2016-02-24 Wed 16:16] =>  0:54
  - Recherche Routen Aufbereitung
  CLOCK: [2016-02-19 Fri 16:26]--[2016-02-19 Fri 21:36] =>  5:10
  - Recherche: Korrektes indoor tagging um zu Routen
    - indoor: corridor
  - Adaption von graphhopper auf Tag indoor: corridor
    - Tag in FootFlagEncoder hinzugefügt
    - viele Testfails
    - viel Probieren
    - hey, mvn package baut das jar nicht neu *duh*
    - mvn install
    - funktioniert      
  CLOCK: [2016-02-16 Tue 18:54]--[2016-02-16 Tue 23:17] =>  4:23
  - Recherche. 
  - Aufsetzen Graphhopper Server. 
  - Anpassung des Graphhopper Server auf Fussgaenger Support.
  - Einbinde des TU Grundriss in JOSM.
  - Testen von Navigationsattributen.
  CLOCK: [2016-02-14 Sun 13:30]--[2016-02-14 Sun 16:33] =>  3:03
  CLOCK: [2016-02-09 Tue 20:35]--[2016-02-09 Tue 22:05] =>  1:30
  CLOCK: [2016-02-04 Thu 13:12]--[2016-02-04 Thu 18:12] =>  5:00
  CLOCK: [2016-02-03 Wed 20:41]--[2016-02-04 Thu 02:41] =>  4:00

