* Konzept
- indoor landmark navigation
- TU Gebäude als Test Umgebung
- erweiterbares Framework
  - Ortbestimmung durch WIFI Triangulation
  - Hinzugefügte Landmark Bilder mittels Compass ausrichten
- Android App
- LMs durch user input
- Navigation anhand von LMs
- Kartographie über OSM

Funktionen:
- Routenplanung im Gebäude.
  - Startpunkt, Endpunkt (Geoposition oder Raum)
  - Route
- Indoor Visualisierung der Route
- Map View. Digitaler Grundriss der TU (Hauptgebäude).
  - LMs im Map View anzeigen (Thumbnails).
- LM View. Route durch Serie von Bildern und Instruktionen anzeigen.
- Hinzufügen von LMs mittels Smartphone Kamera und Platzierung auf der
  Karte.

Vorgehensweise
1) Rerche
2) Routenplanung
3) Visualisierung Indoor
4) LM Datenbank Design
5) LMs von Route berechnen (Bilder + Text)

TODOs:
- Datenbankdesign
  - Grundrisspläne -> OSM
  - LM Bilder (Position, Ausrichtung, Inhalt)
- Businesslogik
  - Routenplanung
  - LMs speichern/ändern
- GUI
  - Map View
  - LM View
  - LM hinzufügen Maske

* Open Street Maps

[[file:img/OSM_Components.png]]


* Indoor Tagging
** Tags in use
 - level=n - indicates floor level; interpretation of the values
   varies (see key page) 

   <n> is usually an integer number, sometimes also one or two
   characters, sometimes combined (e.g. A,B,C,1,2,3).  in any case,
   <n> should be ascending (towards the sky).  in some cultures base
   level is indicated by level 0, in other cultures ground floor is
   level 1 (or A).  there are also usages reported where fraction
   numbers are used (e.g. level=2.5) indicating a "mezzanine" or
   "intermediate level" (e.g. intermediate stairway platforms).  Room
   number and name is entered in the ref=* and name=* tag.
 - room=yes - see key wiki page for additional values to describe the
   type more detailed
 - entrance=yes - room or building entrance
 - capacity=* - number of seats in a room
 - highway=elevator - elevators
 - highway=steps - stairways
 - conveying=yes/forward/backward/reversible

** proposed Tags
highway=corridor - indoor ways
indoor=yes - indicates any osm object being inside a room, a building
(or both) or a shelter.

* Indoor Routing
** Anyplace
   failed -> Google Maps, not OSM

** Graphhopper
*** default OSM
    [[file:img/graphhopper-default-osm.png]]

*** edit: add tag foot=yes
    [[file:img/graphhopper-edited-osm-foot-yes.png]]

*** ?? select room as source/destination
*** ?? supported tags. foot=yes necessary?
    - foot=yes bezieht sich auf eine access restriction und sollte
      daher nicht attribut fuer 'routebar' verwendet werden. besser
      wäre es das attribut highway=corridor in graphhopper aufzunehmen
      und fuer fussgaengerwege zu verwenden. <2016-02-13 Sat 23:20>
*** FlagEncoder
    GH verwendet FlagEncoder (zB Foot, Car, Bike) um die OSM Tags
    entsprechend zu interpretieren. 
    Da für indoor Routen der Tag highway=corridor verwendet wird, habe
    ich den FootFlagEncoder entsprechend erweitert. Damit wird indoor
    routing grundsätzlich ausgeführt. 
    Es gilt nun den Level Tag zu berücksichtigen um kein Routing
    Mischmasch zwischen Stockwerken zu bekommen. Das sollte sich in
    der Methode acceptWay() im FootFlagEncoder einstellen lassen.
    <2016-02-19 Fri 21:42>
    

* Glossar
** Osmosis
   Java CLI application to process osm data.
** API
   RESTfull API, returns XML (.osm)
   base url: http://api.openstreetmap.org/
   dev base url: http://api06.dev.openstreetmap.org/
   
   example call:
   http://api.openstreetmap.org/api/0.6/map?bbox=left,bottom,right,top
   as in:
   http://www.openstreetmap.org/api/0.6/map?bbox=48.20742,16.42073,48.20713,16.42142
   (to get Ernst-Happel Stadion)

** Mapnik
   OS C++ toolkit for rendering maps.

** PostgreSQL
   FOSS ORDBMS (object relational database management system)

** PostGIS
   postgres addon for geographic object support

** osm2pgsql
   cli programm to convert osm files to postGIS enabled postgres
   database

** planet.osm
   weekly dump of osm data into *.osm files

** XAPI
   extended osm API, REST with X-path flavouring

** XPath
   Query language to navigate through the tree of an XML file

** Overpass API
   Extended XAPI API for read only access to OSM.
   Faster then regular API, and supports far more compelx queries.

** overpass turbo
   web frontend for the overpass API for testing
   http://overpass-turbo.eu/

** Leaflet
   OS slippy map javascript library

** OpenLayers
   OS javascript library to display map data in web browsers (same
   purpose as leaflet)
   
** potlatch
   flash web osm editor

** josm
   java desktop osm editor

** Graphhopper
   open source routing library and server

* Open Questions and Discussables
- Android app or Web App?
  - in wie weit sind die libraries (e.g. leaflet) mit android kompatibel?
  - ist eine android app sinnvoll? web app ist systemuebergreifend und
    kann zusaetzlich auf mobile optimiert werden. (responsive design)

- Proof of concept vs. working application
  - lm oder nur indoor routing

- stundenliste
  - detailgrad

- notes.org
  - living document
  - basis fuer schriftlichen teil
    
- öffentliche Zugänglichkeit
  - ZKK

- Datenschutz

  - Recht Fotos von Innenräumen öffentlich machen

* Stundenliste
  CLOCK: [2016-02-19 Fri 16:26]--[2016-02-19 Fri 21:36] =>  5:10
  - Recherche: Korrektes indoor tagging um zu Routen
    - indoor: corridor
  - Adaption von graphhopper auf Tag indoor: corridor
    - Tag in FootFlagEncoder hinzugefügt
    - viele Testfails
    - viel Probieren
    - hey, mvn package baut das jar nicht neu *duh*
    - mvn install
    - funktioniert      
  CLOCK: [2016-02-16 Tue 18:54]--[2016-02-16 Tue 23:17] =>  4:23
  - Recherche. 
  - Aufsetzen Graphhopper Server. 
  - Anpassung des Graphhopper Server auf Fussgaenger Support.
  - Einbinde des TU Grundriss in JOSM.
  - Testen von Navigationsattributen.
  CLOCK: [2016-02-14 Sun 13:30]--[2016-02-14 Sun 16:33] =>  3:03
  CLOCK: [2016-02-09 Tue 20:35]--[2016-02-09 Tue 22:05] =>  1:30
  CLOCK: [2016-02-04 Thu 13:12]--[2016-02-04 Thu 18:12] =>  5:00
  CLOCK: [2016-02-03 Wed 20:41]--[2016-02-04 Thu 02:41] =>  4:00

